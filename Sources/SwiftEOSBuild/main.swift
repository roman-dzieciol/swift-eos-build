
import Foundation
import ArgumentParser
import ClangAST
import SwiftAST
import SwiftFromClang
import SwiftRefactor
import SwiftPrinter
import os.log

extension Logger {
    public static let main = Logger(subsystem: "dev.roman.eos", category: "Main")
}

private struct Defaults {

    static let repositoryRootURL = URL(fileURLWithPath: #file)
        .deletingLastPathComponent()
        .deletingLastPathComponent()
        .deletingLastPathComponent()

    static let versionStringURL = repositoryRootURL
        .appendingPathComponent("eos-version.txt")

    static func version() throws -> String {
        try String(contentsOf: Defaults.versionStringURL).trimmingCharacters(in: .whitespacesAndNewlines)
    }

    static func versionOutputURL(version: String? = nil) throws -> URL {
        try repositoryRootURL
            .appendingPathComponent("Temp")
            .appendingPathComponent(version ?? Defaults.version())
    }

    static func astURL(version: String? = nil) throws -> URL {
        try versionOutputURL().appendingPathComponent("AST/EOSSDK.ast.json")
    }

    static func bindingsURL(version: String? = nil) throws -> URL {
        try versionOutputURL().appendingPathComponent("Bindings")
    }

    static func sourceOfHandwrittenCodeURL() -> URL {
        repositoryRootURL.appendingPathComponent("Sources/SwiftRefactor/EOSSDK/Public")
    }

    static func bindingsHandwrittenCodeURL(bindingsURL: URL) -> URL {
        bindingsURL.appendingPathComponent("EOS/Sources/EOS/SwiftEOS")
    }

    static func bindingsGeneratedCodeURL(bindingsURL: URL) -> URL {
        bindingsURL.appendingPathComponent("EOS/Sources/EOS/EOSSDK")
    }
}

struct SwiftEOSBuild: ParsableCommand {

    @Option var astPath: String?
    @Option var bindingsPath: String?
    @Flag var allowDelete: Bool = false

    mutating func run() throws {

        let astURL = try astPath.map { URL(fileURLWithPath: $0) } ?? Defaults.astURL()
        let bindingsURL = try bindingsPath.map { URL(fileURLWithPath: $0) } ?? Defaults.bindingsURL()

        guard FileManager.default.fileExists(atPath: astURL.path) else {
            throw ValidationError("Input not found: \(astURL.path)")
        }

        try SwiftEOSBuildImpl(
            astURL: astURL,
            bindingsURL: bindingsURL,
            allowDelete: allowDelete
        ).main()
    }
}

class SwiftEOSBuildImpl {

    let logger = Logger.main
    let allowDelete: Bool
    let astURL: URL
    let bindingsURL: URL
    let handwrittenCodeSourceURL: URL
    let handwrittenCodeTargetURL: URL
    let autogeneratedCodeOutputURL: URL

    init(astURL: URL, bindingsURL: URL, allowDelete: Bool) throws {
        self.allowDelete = allowDelete
        self.astURL = astURL
        self.bindingsURL = bindingsURL
        self.handwrittenCodeSourceURL = Defaults.sourceOfHandwrittenCodeURL()
        self.handwrittenCodeTargetURL = Defaults.bindingsHandwrittenCodeURL(bindingsURL: bindingsURL)
        self.autogeneratedCodeOutputURL = Defaults.bindingsGeneratedCodeURL(bindingsURL: bindingsURL)

        logger.log( "AST input path: \(astURL.path, privacy: .public)")
        logger.log( "Bindings handwritten code source dir: \(self.handwrittenCodeSourceURL.path, privacy: .public)")
        logger.log( "Bindings handwritten code target dir: \(self.handwrittenCodeTargetURL.path, privacy: .public)")
        logger.log( "Bindings autogenerated code output dir: \(self.autogeneratedCodeOutputURL.path, privacy: .public)")

        try checkOrRemoveDirectory(at: handwrittenCodeTargetURL, allowDelete: allowDelete)
        try checkOrRemoveDirectory(at: autogeneratedCodeOutputURL, allowDelete: allowDelete)
    }

    private func checkOrRemoveDirectory(at url: URL, allowDelete: Bool) throws {
        guard FileManager.default.fileExists(atPath: url.path) else { return }

        if allowDelete {
            logger.log("Output directory already exists, trashing: \(url.path, privacy: .public)")
            try FileManager.default.trashItem(at: url, resultingItemURL: nil)
        } else {
            throw ValidationError("Output directory already exists, please remove: \(url.path)")
        }
    }

    func main() throws {

        let clangAST = try ClangAST.from(url: astURL)

        logger.log("Building SwiftAST...")
        let swiftAST = try SwiftFromClang(ast: clangAST).swiftModule()
        logger.log("Built SwiftAST")

        let refactoredModule = try SwiftRefactor().refactor(module: swiftAST)

        logger.log("Printing to \(self.autogeneratedCodeOutputURL.path, privacy: .public)...")
        try SwiftPrinter(outputDir: autogeneratedCodeOutputURL).write(module: refactoredModule)
        logger.log("Printed to \(self.autogeneratedCodeOutputURL.path, privacy: .public)")

        logger.log("Copying handwritten code to \(self.handwrittenCodeTargetURL.path, privacy: .public)...")
        try FileManager.default.copyItem(at: handwrittenCodeSourceURL, to: handwrittenCodeTargetURL)
        logger.log("Copied handwritten code to \(self.handwrittenCodeTargetURL.path, privacy: .public)")

        print("Bindings written to: \(self.autogeneratedCodeOutputURL.path)")
    }
}


SwiftEOSBuild.main()
